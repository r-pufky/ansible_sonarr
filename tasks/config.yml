---
# yamllint disable rule:line-length
###############################################################################
# Sonarr Config
###############################################################################
# Sonarr is installed from source. Create systemd service and reload daemons,
# create required directories, certificates, set config, and start service.
# Service may not exist if first install.
#
# New config.xml options must be manually added to the template.
#
# Args:
#   _sonarr_uid: int - sonarr user UID.
#   _sonarr_gid: int - sonarr user GID.
#
# Reference:
# * https://github.com/Sonarr/Sonarr/blob/develop/distribution/debian/install.sh
# * https://github.com/Sonarr/Sonarr/blob/main/distribution/debian/sonarr.service
# yamllint enable rule:line-length

- name: 'Config | Sonarr service'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.systemd'
  vars:
    systemd_daemon_reload_enable: true
    systemd_services:
      - name: 'sonarr'
        state: 'present'
        drop_in: false
        unit:
          description: 'Sonarr Daemon'
          after:
            - 'syslog.target'
            - 'network.target'
        service:
          type: 'simple'
          exec_start:
            - >-
              {{ sonarr_role_repo_extract_symlink }}/Sonarr
              -nobrowser
              -data={{ sonarr_service_data_dir }}
          timeout_stop_sec: 20
          restart: 'always'  # always restart for periodic service restarts
          runtime_max_sec:
            '{{ "1d" if sonarr_service_restart_daily_enable else "infinity" }}'
        exec:
          user: '{{ sonarr_user }}'
          group: '{{ sonarr_group }}'
          u_mask: '{{ sonarr_service_u_mask }}'
        kill:
          kill_mode: 'process'
        install:
          wanted_by:
            - 'multi-user.target'

- name: 'Config | stop Sonarr'
  ansible.builtin.service:
    name: 'sonarr'
    state: 'stopped'

- name: 'Config | set {{ sonarr_service_data_dir }}'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.utils'
    tasks_from: 'remote_file.yml'
  vars:
    file_path: '{{ sonarr_service_data_dir }}'
    file_owner: '{{ _sonarr_uid }}'
    file_group: '{{ _sonarr_gid }}'
    file_mode: '0775'
    file_recurse: '{{ sonarr_service_permissions_recursive_enable }}'
    file_state: 'directory'

- name: 'Config | set {{ sonarr_service_data_dir }}/sonarr.pfx'
  when: sonarr_config_enable_ssl  # noqa name[template] full path
  ansible.builtin.copy:
    src: '{{ sonarr_config_ssl_cert_path }}'
    dest: '{{ sonarr_service_data_dir }}/sonarr.pfx'
    owner: '{{ sonarr_user }}'
    group: '{{ sonarr_group }}'
    mode: '0640'
    force: true

- name: 'Config | remove {{ sonarr_service_data_dir }}/sonarr.pfx'
  when: not sonarr_config_enable_ssl  # noqa name[template] full path
  ansible.builtin.file:
    dest: '{{ sonarr_service_data_dir }}/sonarr.pfx'
    state: 'absent'

- name: 'Config | set {{ sonarr_service_data_dir }}/update_script'
  when: not sonarr_config_update_mechanism  # noqa name[template] full path
  ansible.builtin.copy:
    src: '{{ sonarr_config_update_script_path }}'
    dest: '{{ sonarr_service_data_dir }}/update_script'
    owner: '{{ sonarr_user }}'
    group: '{{ sonarr_group }}'
    mode: '0750'
    force: true

- name: 'Config | remove {{ sonarr_service_data_dir }}/update_script'
  when: sonarr_config_update_mechanism  # noqa name[template] full path
  ansible.builtin.file:
    dest: '{{ sonarr_service_data_dir }}/update_script'
    state: 'absent'

# Use UID/GID as some media filesystems may be remote.
- name: 'Config | set media root folders'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.utils'
    tasks_from: 'remote_file.yml'
  vars:
    file_path: '{{ item }}'
    file_owner: '{{ _sonarr_uid }}'
    file_group: '{{ _sonarr_gid }}'
    file_mode: '{{ sonarr_media_perms_folder }}'
    file_recurse: '{{ sonarr_service_permissions_recursive_enable }}'
    file_state: 'directory'
  loop: '{{ sonarr_media_root_folders }}'

# Use UID/GID as some media filesystems may be remote.
- name: 'Config | set media root files'
  when: sonarr_media_set_perms_file_enable
  ansible.builtin.shell: >-
    find '{{ item }}'
    -type f
    -exec chmod {{ sonarr_media_perms_file }} {};
      chown {{ _sonarr_uid }}:{{ _sonarr_gid }} {} \;
  changed_when: false
  loop: '{{ sonarr_media_root_folders }}'

# Writing the configuration back requires to_json, ansible.utils.to_xml, and
# xmltodict python3 package installed on both controller and node. Just use a
# template instead.
- name: 'Config | set Sonarr configuration'
  notify: 'Handlers | restart sonarr'
  ansible.builtin.template:
    src: 'config.xml.j2'
    dest: '{{ sonarr_service_data_dir }}/config.xml'
    owner: '{{ sonarr_user }}'
    group: '{{ sonarr_group }}'
    mode: '0600'

- name: 'Config | start Sonarr'
  ansible.builtin.service:
    name: 'sonarr'
    state: 'started'
